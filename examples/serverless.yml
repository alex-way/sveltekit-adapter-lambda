service: "sveltekit-app"

frameworkVersion: "3"

plugins:
  - serverless-s3-deploy

provider:
  name: aws
  runtime: nodejs16.x
  lambdaHashingVersion: 20201221
  region: us-east-1 #Lambda@Edge must be deployed in us-east-1
  stage: ${opt:stage, 'dev'}

package:
  individually: true
  exclude:
    - ./**
  include:
    - build/server/**
    - build/edge/**

custom:
  assets:
    auto: true
    targets:
      - bucket:
          Ref: StaticAssets
        empty: true
        files:
          - source: ./build/assets/
            globs:
              - "**"
            headers:
              CacheControl: max-age=31104000
          - source: ./build/prerendered/
            globs:
              - "**"
            headers:
              CacheControl: max-age=60

functions:
  ssr:
    handler: build/server/serverless.handler
    memorySize: 256
    timeout: 15
    url: true

resources:
  Resources:
    StaticAssets:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:provider.stage}-${self:service}-static-assets

    StaticAssetsS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticAssets
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource:
                Fn::Join:
                  ["", ["arn:aws:s3:::", { "Ref": "StaticAssets" }, "/*"]]

    WebsiteDistribution:
      Type: "AWS::CloudFront::Distribution"
      Properties:
        DistributionConfig:
          Origins:
            - DomainName:
                !Select [
                  2,
                  !Split ["/", !GetAtt "SsrLambdaFunctionUrl.FunctionUrl"],
                ]
              Id: default
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: "https-only"
            - DomainName: !GetAtt "StaticAssetsS3Bucket.DomainName"
              Id: assets
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: "https-only"
          CacheBehaviors:
            - TargetOriginId: assets
              ViewerProtocolPolicy: redirect-to-https
              PathPattern: /_app/*
              Compress: true
              # CachingOptimised cache policy: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
              CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
            - TargetOriginId: assets
              ViewerProtocolPolicy: redirect-to-https
              PathPattern: /img/*
              Compress: true
              # CachingOptimised cache policy: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
              CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          Enabled: true
          Comment: "${self:service}_${self:provider.stage}"
          DefaultCacheBehavior:
            TargetOriginId: default
            Compress: true
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            ForwardedValues:
              Headers:
                - Origin
              Cookies:
                Forward: all
              QueryString: True
            ViewerProtocolPolicy: "redirect-to-https"
